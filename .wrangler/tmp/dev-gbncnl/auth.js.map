{
  "version": 3,
  "sources": ["../bundle-QmdgzI/checked-fetch.js", "../../../workers/auth.js", "../../../../../../../../Library/Application Support/Herd/config/nvm/versions/node/v22.17.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../../Library/Application Support/Herd/config/nvm/versions/node/v22.17.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-QmdgzI/middleware-insertion-facade.js", "../../../../../../../../Library/Application Support/Herd/config/nvm/versions/node/v22.17.0/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-QmdgzI/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/suhendararyadi/Documents/Belajar Coding/NEXTJS.JS/Aplikasi LPPM 2/lppm-research-system/.wrangler/tmp/dev-gbncnl",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// Cloudflare Worker for Authentication\n// This worker handles user authentication, registration, and session management\n\nexport default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    // CORS headers\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Environment',\n      'Access-Control-Max-Age': '86400',\n    };\n\n    // Handle preflight requests\n    if (request.method === 'OPTIONS') {\n      return new Response(null, {\n        status: 200,\n        headers: corsHeaders,\n      });\n    }\n\n    try {\n      // Route handling for multiple services\n      if (path.startsWith('/auth/')) {\n        return await handleAuthRoutes(request, env, path, corsHeaders);\n      } else if (path.startsWith('/research/')) {\n        return await handleResearchRoutes(request, env, path, corsHeaders);\n      } else if (path.startsWith('/service/') || path === '/service') {\n        return await handleServiceRoutes(request, env, path, corsHeaders);\n      } else if (path.startsWith('/documents/')) {\n        return await handleDocumentRoutes(request, env, path, corsHeaders);\n      } else if (path.startsWith('/notifications/')) {\n        return await handleNotificationRoutes(request, env, path, corsHeaders);\n      } else if (path.startsWith('/users')) {\n        return await handleUserRoutes(request, env, path, corsHeaders);\n      } else if (path.startsWith('/program-studi')) {\n        return await handleProgramStudiRoutes(request, env, path, corsHeaders);\n      } else if (path === '/health') {\n        return new Response(\n          JSON.stringify({\n            success: true,\n            status: 'healthy',\n            timestamp: new Date().toISOString(),\n            services: ['auth', 'research', 'service', 'documents', 'notifications', 'users', 'program-studi']\n          }),\n          {\n            status: 200,\n            headers: {\n              ...corsHeaders,\n              'Content-Type': 'application/json',\n            },\n          }\n        );\n      }\n\n      return new Response('Not Found', {\n        status: 404,\n        headers: corsHeaders,\n      });\n    } catch (error) {\n      console.error('Worker error:', error);\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: 'Internal server error',\n          message: error.message,\n        }),\n        {\n          status: 500,\n          headers: {\n            ...corsHeaders,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n    }\n  },\n};\n\n// Handle auth routes\nasync function handleAuthRoutes(request, env, path, corsHeaders) {\n  let response;\n\n  switch (path) {\n    case '/auth/login':\n      response = await handleLogin(request, env);\n      break;\n    case '/auth/register':\n      response = await handleRegister(request, env);\n      break;\n    case '/auth/logout':\n      response = await handleLogout(request, env);\n      break;\n    case '/auth/verify':\n      response = await handleVerifyToken(request, env);\n      break;\n    case '/auth/refresh':\n      response = await handleRefreshToken(request, env);\n      break;\n    default:\n      response = new Response('Not Found', { status: 404 });\n  }\n\n  // Add CORS headers to response\n  Object.entries(corsHeaders).forEach(([key, value]) => {\n    response.headers.set(key, value);\n  });\n\n  return response;\n}\n\n// Handle user login\nasync function handleLogin(request, env) {\n  if (request.method !== 'POST') {\n    return new Response('Method Not Allowed', { status: 405 });\n  }\n\n  const { email, password } = await request.json();\n\n  if (!email || !password) {\n    return new Response(\n      JSON.stringify({ error: 'Email and password are required' }),\n      { status: 400, headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n\n  // Query user from D1 database\n  const user = await env.DB.prepare(\n    'SELECT * FROM users WHERE email = ? AND is_active = 1'\n  ).bind(email).first();\n\n  if (!user) {\n    return new Response(\n      JSON.stringify({ error: 'Invalid credentials' }),\n      { status: 401, headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n\n  // Verify password (in production, use proper password hashing)\n  const isValidPassword = await verifyPassword(password, user.password_hash);\n  \n  if (!isValidPassword) {\n    return new Response(\n      JSON.stringify({ error: 'Invalid credentials' }),\n      { status: 401, headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n\n  // Generate JWT token\n  const token = await generateJWT({\n    userId: user.id,\n    email: user.email,\n    role: user.role,\n    name: user.name\n  }, env.JWT_SECRET);\n\n  // Update last login\n  await env.DB.prepare(\n    'UPDATE users SET last_login = datetime(\"now\") WHERE id = ?'\n  ).bind(user.id).run();\n\n  return new Response(\n    JSON.stringify({\n      success: true,\n      token,\n      user: {\n        id: String(user.id), // Convert to string for frontend compatibility\n        email: user.email,\n        name: user.name,\n        role: user.role,\n        department: user.department,\n        institution: user.institution\n      }\n    }),\n    { \n      status: 200, \n      headers: { 'Content-Type': 'application/json' } \n    }\n  );\n}\n\n// Handle user registration\nasync function handleRegister(request, env) {\n  if (request.method !== 'POST') {\n    return new Response('Method Not Allowed', { status: 405 });\n  }\n\n  const { email, password, name, role, department, institution } = await request.json();\n\n  if (!email || !password || !name || !role) {\n    return new Response(\n      JSON.stringify({ error: 'Required fields missing' }),\n      { status: 400, headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n\n  // Check if user already exists\n  const existingUser = await env.DB.prepare(\n    'SELECT id FROM users WHERE email = ?'\n  ).bind(email).first();\n\n  if (existingUser) {\n    return new Response(\n      JSON.stringify({ error: 'User already exists' }),\n      { status: 409, headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n\n  // Hash password\n  const passwordHash = await hashPassword(password);\n\n  // Insert new user\n  const result = await env.DB.prepare(`\n    INSERT INTO users (email, password_hash, name, role, department, institution, is_active, created_at)\n    VALUES (?, ?, ?, ?, ?, ?, 1, datetime('now'))\n  `).bind(email, passwordHash, name, role, department, institution).run();\n\n  if (!result.success) {\n    return new Response(\n      JSON.stringify({ error: 'Failed to create user' }),\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n\n  return new Response(\n    JSON.stringify({ \n      success: true, \n      message: 'User created successfully',\n      userId: result.meta.last_row_id\n    }),\n    { \n      status: 201, \n      headers: { 'Content-Type': 'application/json' } \n    }\n  );\n}\n\n// Handle logout\nasync function handleLogout(request, env) {\n  // In a stateless JWT system, logout is handled client-side\n  // But we can add token to blacklist if needed\n  return new Response(\n    JSON.stringify({ success: true, message: 'Logged out successfully' }),\n    { \n      status: 200, \n      headers: { 'Content-Type': 'application/json' } \n    }\n  );\n}\n\n// Verify JWT token\nasync function handleVerifyToken(request, env) {\n  const authHeader = request.headers.get('Authorization');\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return new Response(\n      JSON.stringify({ error: 'No token provided' }),\n      { status: 401, headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n\n  const token = authHeader.substring(7);\n  \n  try {\n    const payload = await verifyJWT(token, env.JWT_SECRET);\n    \n    return new Response(\n      JSON.stringify({ \n        success: true, \n        user: {\n          ...payload,\n          id: String(payload.userId) // Convert userId to id as string for frontend compatibility\n        }\n      }),\n      { \n        status: 200, \n        headers: { 'Content-Type': 'application/json' } \n      }\n    );\n  } catch (error) {\n    return new Response(\n      JSON.stringify({ error: 'Invalid token' }),\n      { status: 401, headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n}\n\n// Community Service Functions\nasync function getCommunityServices(request, env, user, corsHeaders) {\n  try {\n    const url = new URL(request.url);\n    const page = parseInt(url.searchParams.get('page')) || 1;\n    const limit = parseInt(url.searchParams.get('limit')) || 10;\n    const status = url.searchParams.get('status');\n    const type = url.searchParams.get('type');\n    const search = url.searchParams.get('search');\n    const created_by = url.searchParams.get('created_by');\n\n    const offset = (page - 1) * limit;\n\n    // Build WHERE clause\n    let whereConditions = [];\n    let params = [];\n    let paramIndex = 1;\n\n    if (status) {\n      whereConditions.push(`status = ?${paramIndex}`);\n      params.push(status);\n      paramIndex++;\n    }\n\n    if (type) {\n      whereConditions.push(`type = ?${paramIndex}`);\n      params.push(type);\n      paramIndex++;\n    }\n\n    if (search) {\n      whereConditions.push(`(title LIKE ?${paramIndex} OR description LIKE ?${paramIndex + 1})`);\n      params.push(`%${search}%`, `%${search}%`);\n      paramIndex += 2;\n    }\n\n    if (created_by) {\n      whereConditions.push(`created_by = ?${paramIndex}`);\n      params.push(parseInt(created_by));\n      paramIndex++;\n    }\n\n    // Role-based filtering\n    if (user.role === 'lecturer' || user.role === 'dosen') {\n      if (!created_by) {\n        whereConditions.push(`created_by = ?${paramIndex}`);\n        params.push(user.userId);\n        paramIndex++;\n      }\n    }\n\n    const whereClause = whereConditions.length > 0 ? `WHERE ${whereConditions.join(' AND ')}` : '';\n\n    // Get total count\n    const countQuery = `SELECT COUNT(*) as total FROM community_services ${whereClause}`;\n    const countResult = await env.DB.prepare(countQuery).bind(...params).first();\n    const total = countResult.total;\n\n    // Get paginated results\n    const query = `\n      SELECT \n        cs.*,\n        u.name as creator_name,\n        u.email as creator_email\n      FROM community_services cs\n      LEFT JOIN users u ON cs.created_by = u.id\n      ${whereClause}\n      ORDER BY cs.created_at DESC\n      LIMIT ?${paramIndex} OFFSET ?${paramIndex + 1}\n    `;\n    \n    params.push(limit, offset);\n    const result = await env.DB.prepare(query).bind(...params).all();\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        data: result.results || [],\n        pagination: {\n          page,\n          limit,\n          total,\n          totalPages: Math.ceil(total / limit)\n        }\n      }),\n      {\n        status: 200,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error fetching community services:', error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: 'Failed to fetch community services',\n        message: error.message\n      }),\n      {\n        status: 500,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }\n}\n\nasync function getCommunityService(id, env, user, corsHeaders) {\n  try {\n    const query = `\n      SELECT \n        cs.*,\n        u.name as creator_name,\n        u.email as creator_email\n      FROM community_services cs\n      LEFT JOIN users u ON cs.created_by = u.id\n      WHERE cs.id = ?1\n    `;\n    \n    const result = await env.DB.prepare(query).bind(id).first();\n    \n    if (!result) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: 'Community service not found'\n        }),\n        {\n          status: 404,\n          headers: {\n            ...corsHeaders,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n    }\n\n    // Check permissions\n    if ((user.role === 'lecturer' || user.role === 'dosen') && result.created_by !== user.id) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: 'Access denied'\n        }),\n        {\n          status: 403,\n          headers: {\n            ...corsHeaders,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        data: result\n      }),\n      {\n        status: 200,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error fetching community service:', error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: 'Failed to fetch community service',\n        message: error.message\n      }),\n      {\n        status: 500,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }\n}\n\nasync function createCommunityService(request, env, user, corsHeaders) {\n  try {\n    const data = await request.json();\n    \n    // Validate required fields\n    const requiredFields = ['title', 'description', 'type', 'budget', 'start_date', 'end_date'];\n    for (const field of requiredFields) {\n      if (!data[field]) {\n        return new Response(\n          JSON.stringify({\n            success: false,\n            error: `Field ${field} is required`\n          }),\n          {\n            status: 400,\n            headers: {\n              ...corsHeaders,\n              'Content-Type': 'application/json',\n            },\n          }\n        );\n      }\n    }\n\n    const now = new Date().toISOString();\n    \n    const query = `\n      INSERT INTO community_services (\n        title, description, type, budget, start_date, end_date,\n        objectives, target_audience, expected_impact, location,\n        status, created_by, created_at, updated_at\n      ) VALUES (\n        ?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, 'draft', ?11, ?12, ?13\n      )\n    `;\n    \n    const result = await env.DB.prepare(query).bind(\n      data.title,\n      data.description,\n      data.type,\n      data.budget,\n      data.start_date,\n      data.end_date,\n      data.objectives || '',\n      data.target_audience || '',\n      data.expected_outcomes || data.expected_impact || '',\n      data.location || '',\n      user.userId,\n      now,\n      now\n    ).run();\n\n    if (!result.success) {\n      throw new Error('Failed to create community service');\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        data: {\n          id: result.meta.last_row_id,\n          ...data,\n          status: 'draft',\n          created_by: user.userId,\n          created_at: now,\n          updated_at: now\n        }\n      }),\n      {\n        status: 201,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error creating community service:', error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: 'Failed to create community service',\n        message: error.message\n      }),\n      {\n        status: 500,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }\n}\n\nasync function updateCommunityService(id, request, env, user, corsHeaders) {\n  try {\n    // Check if community service exists and user has permission\n    const existingService = await env.DB.prepare('SELECT * FROM community_services WHERE id = ?1').bind(id).first();\n    \n    if (!existingService) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: 'Community service not found'\n        }),\n        {\n          status: 404,\n          headers: {\n            ...corsHeaders,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n    }\n\n    // Check permissions\n    if ((user.role === 'lecturer' || user.role === 'dosen') && existingService.created_by !== user.id) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: 'Access denied'\n        }),\n        {\n          status: 403,\n          headers: {\n            ...corsHeaders,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n    }\n\n    const data = await request.json();\n    const now = new Date().toISOString();\n    \n    const query = `\n      UPDATE community_services SET\n        title = ?1,\n        description = ?2,\n        type = ?3,\n        budget = ?4,\n        start_date = ?5,\n        end_date = ?6,\n        objectives = ?7,\n        target_audience = ?8,\n        expected_impact = ?9,\n        location = ?10,\n        updated_at = ?11\n      WHERE id = ?12\n    `;\n    \n    const result = await env.DB.prepare(query).bind(\n      data.title || existingService.title,\n      data.description || existingService.description,\n      data.type || existingService.type,\n      data.budget || existingService.budget,\n      data.start_date || existingService.start_date,\n      data.end_date || existingService.end_date,\n      data.objectives || existingService.objectives,\n      data.target_audience || existingService.target_audience,\n      data.expected_outcomes || data.expected_impact || existingService.expected_impact,\n      data.location || existingService.location,\n      now,\n      id\n    ).run();\n\n    if (!result.success) {\n      throw new Error('Failed to update community service');\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        data: {\n          ...existingService,\n          ...data,\n          updated_at: now\n        }\n      }),\n      {\n        status: 200,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error updating community service:', error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: 'Failed to update community service',\n        message: error.message\n      }),\n      {\n        status: 500,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }\n}\n\nasync function deleteCommunityService(id, env, user, corsHeaders) {\n  try {\n    // Check if community service exists and user has permission\n    const existingService = await env.DB.prepare('SELECT * FROM community_services WHERE id = ?1').bind(id).first();\n    \n    if (!existingService) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: 'Community service not found'\n        }),\n        {\n          status: 404,\n          headers: {\n            ...corsHeaders,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n    }\n\n    // Check permissions\n    if ((user.role === 'lecturer' || user.role === 'dosen') && existingService.created_by !== user.id) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: 'Access denied'\n        }),\n        {\n          status: 403,\n          headers: {\n            ...corsHeaders,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n    }\n\n    // Don't allow deletion of submitted proposals\n    if (existingService.status !== 'draft') {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: 'Cannot delete submitted community service'\n        }),\n        {\n          status: 400,\n          headers: {\n            ...corsHeaders,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n    }\n\n    const result = await env.DB.prepare('DELETE FROM community_services WHERE id = ?1').bind(id).run();\n\n    if (!result.success) {\n      throw new Error('Failed to delete community service');\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        message: 'Community service deleted successfully'\n      }),\n      {\n        status: 200,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error deleting community service:', error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: 'Failed to delete community service',\n        message: error.message\n      }),\n      {\n        status: 500,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }\n}\n\nasync function submitCommunityService(id, env, user, corsHeaders) {\n  try {\n    // Check if community service exists and user has permission\n    const existingService = await env.DB.prepare('SELECT * FROM community_services WHERE id = ?1').bind(id).first();\n    \n    if (!existingService) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: 'Community service not found'\n        }),\n        {\n          status: 404,\n          headers: {\n            ...corsHeaders,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n    }\n\n    // Check permissions\n    if ((user.role === 'lecturer' || user.role === 'dosen') && existingService.created_by !== user.id) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: 'Access denied'\n        }),\n        {\n          status: 403,\n          headers: {\n            ...corsHeaders,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n    }\n\n    // Check if already submitted\n    if (existingService.status !== 'draft') {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: 'Community service already submitted'\n        }),\n        {\n          status: 400,\n          headers: {\n            ...corsHeaders,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n    }\n\n    const now = new Date().toISOString();\n    \n    const result = await env.DB.prepare(\n      'UPDATE community_services SET status = ?1, submitted_at = ?2, updated_at = ?3 WHERE id = ?4'\n    ).bind('submitted', now, now, id).run();\n\n    if (!result.success) {\n      throw new Error('Failed to submit community service');\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        message: 'Community service submitted successfully',\n        data: {\n          ...existingService,\n          status: 'submitted',\n          submitted_at: now,\n          updated_at: now\n        }\n      }),\n      {\n        status: 200,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error submitting community service:', error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: 'Failed to submit community service',\n        message: error.message\n      }),\n      {\n        status: 500,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }\n}\n\nasync function reviewCommunityService(id, request, env, user, corsHeaders) {\n  try {\n    // Check if user has permission to review\n    if (!['super_admin', 'lppm_admin', 'reviewer'].includes(user.role)) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: 'Access denied. Only admins and reviewers can review community services.'\n        }),\n        {\n          status: 403,\n          headers: {\n            ...corsHeaders,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n    }\n\n    // Check if community service exists\n    const existingService = await env.DB.prepare('SELECT * FROM community_services WHERE id = ?1').bind(id).first();\n    \n    if (!existingService) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: 'Community service not found'\n        }),\n        {\n          status: 404,\n          headers: {\n            ...corsHeaders,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n    }\n\n    const data = await request.json();\n    const { status, review_notes } = data;\n\n    // Validate status\n    if (!['approved', 'rejected', 'needs_revision'].includes(status)) {\n      return new Response(\n        JSON.stringify({\n          success: false,\n          error: 'Invalid status. Must be approved, rejected, or needs_revision'\n        }),\n        {\n          status: 400,\n          headers: {\n            ...corsHeaders,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n    }\n\n    const now = new Date().toISOString();\n    \n    const result = await env.DB.prepare(\n      'UPDATE community_services SET status = ?1, review_notes = ?2, reviewed_by = ?3, reviewed_at = ?4, updated_at = ?5 WHERE id = ?6'\n    ).bind(status, review_notes || '', user.userId, now, now, id).run();\n\n    if (!result.success) {\n      throw new Error('Failed to review community service');\n    }\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        message: 'Community service reviewed successfully',\n        data: {\n          ...existingService,\n          status,\n          review_notes: review_notes || '',\n          reviewed_by: user.userId,\n          reviewed_at: now,\n          updated_at: now\n        }\n      }),\n      {\n        status: 200,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error reviewing community service:', error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: 'Failed to review community service',\n        message: error.message\n      }),\n      {\n        status: 500,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }\n}\n\n// Helper function for auth verification (reused from research worker)\nasync function verifyAuth(request, env) {\n  try {\n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return null;\n    }\n\n    const token = authHeader.substring(7);\n    const payload = await verifyJWT(token, env.JWT_SECRET);\n    \n    if (!payload) {\n      return null;\n    }\n\n    // Get user details from database\n    const user = await env.DB.prepare('SELECT * FROM users WHERE id = ?1').bind(payload.userId).first();\n    \n    if (!user) {\n      return null;\n    }\n\n    return {\n      id: user.id,\n      userId: user.id,\n      email: user.email,\n      name: user.name,\n      role: user.role,\n      department: user.department\n    };\n  } catch (error) {\n    console.error('Auth verification error:', error);\n    return null;\n  }\n}\n\n// Handle token refresh\nasync function handleRefreshToken(request, env) {\n  // Implementation for token refresh logic\n  return new Response(\n    JSON.stringify({ message: 'Token refresh not implemented yet' }),\n    { status: 501, headers: { 'Content-Type': 'application/json' } }\n  );\n}\n\n// Utility functions\nasync function hashPassword(password) {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(password);\n  const hash = await crypto.subtle.digest('SHA-256', data);\n  return Array.from(new Uint8Array(hash))\n    .map(b => b.toString(16).padStart(2, '0'))\n    .join('');\n}\n\nasync function verifyPassword(password, hash) {\n  const passwordHash = await hashPassword(password);\n  return passwordHash === hash;\n}\n\nasync function generateJWT(payload, secret) {\n  const header = {\n    alg: 'HS256',\n    typ: 'JWT'\n  };\n\n  const now = Math.floor(Date.now() / 1000);\n  const jwtPayload = {\n    ...payload,\n    iat: now,\n    exp: now + (24 * 60 * 60) // 24 hours\n  };\n\n  const encodedHeader = btoa(JSON.stringify(header)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  const encodedPayload = btoa(JSON.stringify(jwtPayload)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  \n  const signature = await sign(`${encodedHeader}.${encodedPayload}`, secret);\n  \n  return `${encodedHeader}.${encodedPayload}.${signature}`;\n}\n\nasync function verifyJWT(token, secret) {\n  const parts = token.split('.');\n  if (parts.length !== 3) {\n    throw new Error('Invalid token format');\n  }\n\n  const [header, payload, signature] = parts;\n  const expectedSignature = await sign(`${header}.${payload}`, secret);\n  \n  if (signature !== expectedSignature) {\n    throw new Error('Invalid signature');\n  }\n\n  const decodedPayload = JSON.parse(atob(payload.replace(/-/g, '+').replace(/_/g, '/')));\n  \n  if (decodedPayload.exp < Math.floor(Date.now() / 1000)) {\n    throw new Error('Token expired');\n  }\n\n  return decodedPayload;\n}\n\nasync function sign(data, secret) {\n  const encoder = new TextEncoder();\n  const key = await crypto.subtle.importKey(\n    'raw',\n    encoder.encode(secret),\n    { name: 'HMAC', hash: 'SHA-256' },\n    false,\n    ['sign']\n  );\n  \n  const signature = await crypto.subtle.sign('HMAC', key, encoder.encode(data));\n  return Array.from(new Uint8Array(signature))\n    .map(b => b.toString(16).padStart(2, '0'))\n    .join('');\n}\n\n// Placeholder handlers for other services\nasync function handleResearchRoutes(request, env, path, corsHeaders) {\n  return new Response(\n    JSON.stringify({\n      success: false,\n      error: 'Research service not implemented yet',\n      message: 'This endpoint will be implemented in the next phase'\n    }),\n    {\n      status: 501,\n      headers: {\n        ...corsHeaders,\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n}\n\nasync function handleServiceRoutes(request, env, path, corsHeaders) {\n  const method = request.method;\n  const url = new URL(request.url);\n  \n  // Verify authentication\n  let user = await verifyAuth(request, env);\n  \n  // For development mode, create a mock user if no auth provided\n  if (!user && env.ENVIRONMENT === 'development') {\n    user = {\n      id: 1,\n      userId: 1,\n      email: 'test@example.com',\n      name: 'Test User',\n      role: 'lecturer',\n      department: 'Computer Science'\n    };\n  }\n  \n  if (!user) {\n    return new Response(\n      JSON.stringify({ error: 'Unauthorized' }),\n      { \n        status: 401, \n        headers: { \n          'Content-Type': 'application/json',\n          ...corsHeaders \n        } \n      }\n    );\n  }\n\n  try {\n    if (path === '/service' && method === 'GET') {\n      return await getCommunityServices(request, env, user, corsHeaders);\n    } else if (path === '/service' && method === 'POST') {\n      return await createCommunityService(request, env, user, corsHeaders);\n    } else if (path.match(/^\\/service\\/\\d+$/) && method === 'GET') {\n      const id = parseInt(path.split('/')[2]);\n      return await getCommunityService(id, env, user, corsHeaders);\n    } else if (path.match(/^\\/service\\/\\d+$/) && method === 'PUT') {\n      const id = parseInt(path.split('/')[2]);\n      return await updateCommunityService(id, request, env, user, corsHeaders);\n    } else if (path.match(/^\\/service\\/\\d+$/) && method === 'DELETE') {\n      const id = parseInt(path.split('/')[2]);\n      return await deleteCommunityService(id, env, user, corsHeaders);\n    } else if (path.match(/^\\/service\\/\\d+\\/submit$/) && method === 'POST') {\n      const id = parseInt(path.split('/')[2]);\n      return await submitCommunityService(id, env, user, corsHeaders);\n    } else if (path.match(/^\\/service\\/\\d+\\/review$/) && method === 'POST') {\n      const id = parseInt(path.split('/')[2]);\n      return await reviewCommunityService(id, request, env, user, corsHeaders);\n    }\n\n    return new Response('Not Found', {\n      status: 404,\n      headers: corsHeaders,\n    });\n  } catch (error) {\n    console.error('Service route error:', error);\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: 'Internal server error',\n        message: error.message,\n      }),\n      {\n        status: 500,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }\n}\n\nasync function handleDocumentRoutes(request, env, path, corsHeaders) {\n  return new Response(\n    JSON.stringify({\n      success: false,\n      error: 'Document service not implemented yet',\n      message: 'This endpoint will be implemented in the next phase'\n    }),\n    {\n      status: 501,\n      headers: {\n        ...corsHeaders,\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n}\n\nasync function handleNotificationRoutes(request, env, path, corsHeaders) {\n  return new Response(\n    JSON.stringify({\n      success: false,\n      error: 'Notification service not implemented yet',\n      message: 'This endpoint will be implemented in the next phase'\n    }),\n    {\n      status: 501,\n      headers: {\n        ...corsHeaders,\n        'Content-Type': 'application/json',\n      },\n    }\n  );\n}\n\n// User CRUD Routes\nasync function handleUserRoutes(request, env, path, corsHeaders) {\n  const method = request.method;\n  const pathParts = path.split('/').filter(Boolean);\n  \n  // Verify authentication for all user routes\n  const authHeader = request.headers.get('Authorization');\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return new Response(\n      JSON.stringify({ success: false, message: 'Authentication required' }),\n      { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n\n  const token = authHeader.substring(7);\n  let user;\n  try {\n    user = await verifyJWT(token, env.JWT_SECRET);\n  } catch (error) {\n    return new Response(\n      JSON.stringify({ success: false, message: 'Invalid token' }),\n      { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n\n  // Check permissions - allow lecturers for statistics endpoint only\n  console.log('User role:', user.role, 'User data:', user);\n  const isStatisticsEndpoint = method === 'GET' && pathParts.length === 2 && pathParts[1] === 'statistics';\n  \n  if (!['super_admin', 'lppm_admin', 'admin', 'lecturer'].includes(user.role)) {\n    return new Response(\n      JSON.stringify({ success: false, message: 'Insufficient permissions', userRole: user.role }),\n      { status: 403, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n  \n  // For non-statistics endpoints, only allow admin roles\n  if (!isStatisticsEndpoint && !['super_admin', 'lppm_admin', 'admin'].includes(user.role)) {\n    return new Response(\n      JSON.stringify({ success: false, message: 'Insufficient permissions', userRole: user.role }),\n      { status: 403, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n\n  try {\n    if (method === 'GET' && pathParts.length === 1) {\n      // GET /users - List users with pagination and filtering\n      return await handleGetUsers(request, env, corsHeaders);\n    } else if (method === 'GET' && pathParts.length === 2 && pathParts[1] === 'statistics') {\n      // GET /users/statistics - Get user statistics\n      return await handleGetUserStatistics(request, env, corsHeaders);\n    } else if (method === 'GET' && pathParts.length === 2) {\n      // GET /users/:id - Get specific user\n      const userId = pathParts[1];\n      return await handleGetUser(userId, env, corsHeaders);\n    } else if (method === 'POST' && pathParts.length === 1) {\n      // POST /users - Create new user\n      return await handleCreateUser(request, env, corsHeaders);\n    } else if (method === 'PUT' && pathParts.length === 2) {\n      // PUT /users/:id - Update user\n      const userId = pathParts[1];\n      return await handleUpdateUser(userId, request, env, corsHeaders);\n    } else if (method === 'DELETE' && pathParts.length === 2) {\n      // DELETE /users/:id - Delete user\n      const userId = pathParts[1];\n      return await handleDeleteUser(userId, env, corsHeaders);\n    } else {\n      return new Response(\n        JSON.stringify({ success: false, message: 'Route not found' }),\n        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n  } catch (error) {\n    console.error('Error in user routes:', error);\n    return new Response(\n      JSON.stringify({ success: false, message: 'Internal server error' }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n}\n\n// Program Studi Routes\nasync function handleProgramStudiRoutes(request, env, path, corsHeaders) {\n  const method = request.method;\n  const pathParts = path.split('/').filter(Boolean);\n  \n  try {\n    if (method === 'GET' && pathParts.length === 1) {\n      // GET /program-studi - List all program studi\n      return await handleGetProgramStudi(env, corsHeaders);\n    } else if (method === 'POST' && pathParts.length === 1) {\n      // POST /program-studi - Create new program studi (admin only)\n      return await handleCreateProgramStudi(request, env, corsHeaders);\n    } else if (method === 'PUT' && pathParts.length === 2) {\n      // PUT /program-studi/:id - Update program studi (admin only)\n      const programId = pathParts[1];\n      return await handleUpdateProgramStudi(programId, request, env, corsHeaders);\n    } else if (method === 'DELETE' && pathParts.length === 2) {\n      // DELETE /program-studi/:id - Delete program studi (admin only)\n      const programId = pathParts[1];\n      return await handleDeleteProgramStudi(programId, env, corsHeaders);\n    } else {\n      return new Response(\n        JSON.stringify({ success: false, message: 'Route not found' }),\n        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n  } catch (error) {\n    console.error('Error in program studi routes:', error);\n    return new Response(\n      JSON.stringify({ success: false, message: 'Internal server error' }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n}\n\n// User CRUD Handlers\nasync function handleGetUsers(request, env, corsHeaders) {\n  const url = new URL(request.url);\n  const page = parseInt(url.searchParams.get('page') || '1');\n  const limit = parseInt(url.searchParams.get('limit') || '10');\n  const search = url.searchParams.get('search') || '';\n  const role = url.searchParams.get('role') || '';\n  const program_studi = url.searchParams.get('program_studi') || '';\n  const is_active = url.searchParams.get('is_active');\n  \n  const offset = (page - 1) * limit;\n  \n  let query = 'SELECT * FROM users WHERE 1=1';\n  let countQuery = 'SELECT COUNT(*) as total FROM users WHERE 1=1';\n  const params = [];\n  \n  if (search) {\n    query += ' AND (name LIKE ? OR email LIKE ?)';\n    countQuery += ' AND (name LIKE ? OR email LIKE ?)';\n    params.push(`%${search}%`, `%${search}%`);\n  }\n  \n  if (role) {\n    query += ' AND role = ?';\n    countQuery += ' AND role = ?';\n    params.push(role);\n  }\n  \n  if (program_studi) {\n    query += ' AND program_studi = ?';\n    countQuery += ' AND program_studi = ?';\n    params.push(program_studi);\n  }\n  \n  if (is_active !== null && is_active !== undefined && is_active !== '') {\n    query += ' AND is_active = ?';\n    countQuery += ' AND is_active = ?';\n    params.push(is_active === 'true' ? 1 : 0);\n  }\n  \n  query += ' ORDER BY created_at DESC LIMIT ? OFFSET ?';\n  \n  try {\n    const [usersResult, countResult] = await Promise.all([\n      env.DB.prepare(query).bind(...params, limit, offset).all(),\n      env.DB.prepare(countQuery).bind(...params).first()\n    ]);\n    \n    const users = usersResult.results.map(user => ({\n      ...user,\n      is_active: Boolean(user.is_active),\n      email_verified: Boolean(user.email_verified)\n    }));\n    \n    const total = countResult.total;\n    const totalPages = Math.ceil(total / limit);\n    \n    return new Response(\n      JSON.stringify({\n        success: true,\n        data: {\n          data: users,\n          pagination: {\n            page,\n            limit,\n            total,\n            totalPages\n          }\n        }\n      }),\n      {\n        status: 200,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error getting users:', error);\n    return new Response(\n      JSON.stringify({ success: false, message: 'Failed to get users' }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n}\n\nasync function handleGetUser(userId, env, corsHeaders) {\n  try {\n    const result = await env.DB.prepare('SELECT * FROM users WHERE id = ?').bind(userId).first();\n    \n    if (!result) {\n      return new Response(\n        JSON.stringify({ success: false, message: 'User not found' }),\n        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    const user = {\n      ...result,\n      is_active: Boolean(result.is_active),\n      email_verified: Boolean(result.email_verified)\n    };\n    \n    return new Response(\n      JSON.stringify({ success: true, data: user }),\n      {\n        status: 200,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error getting user:', error);\n    return new Response(\n      JSON.stringify({ success: false, message: 'Failed to get user' }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n}\n\nasync function handleCreateUser(request, env, corsHeaders) {\n  try {\n    const userData = await request.json();\n    \n    // Validate required fields\n    if (!userData.email || !userData.password || !userData.name || !userData.role) {\n      return new Response(\n        JSON.stringify({ success: false, message: 'Missing required fields' }),\n        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    // Check if email already exists\n    const existingUser = await env.DB.prepare('SELECT id FROM users WHERE email = ?').bind(userData.email).first();\n    if (existingUser) {\n      return new Response(\n        JSON.stringify({ success: false, message: 'Email already exists' }),\n        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    // Hash password\n    const hashedPassword = await hashPassword(userData.password);\n    \n    // Generate user ID\n    const userId = crypto.randomUUID();\n    \n    // Prepare user data\n    const now = new Date().toISOString();\n    const expertiseJson = userData.expertise ? JSON.stringify(userData.expertise) : null;\n    \n    // Insert user\n    await env.DB.prepare(`\n      INSERT INTO users (\n        id, email, password_hash, name, role, department, institution, phone, address, expertise,\n        nidn, nuptk, nim, program_studi, status_kepegawaian, jabatan_fungsional, \n        pendidikan_terakhir, tahun_masuk, is_active, email_verified, created_at, updated_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `).bind(\n      userId,\n      userData.email,\n      hashedPassword,\n      userData.name,\n      userData.role,\n      userData.department || null,\n      userData.institution || null,\n      userData.phone || null,\n      userData.address || null,\n      expertiseJson,\n      userData.nidn || null,\n      userData.nuptk || null,\n      userData.nim || null,\n      userData.program_studi || null,\n      userData.status_kepegawaian || null,\n      userData.jabatan_fungsional || null,\n      userData.pendidikan_terakhir || null,\n      userData.tahun_masuk || null,\n      1, // is_active = true\n      0, // email_verified = false\n      now,\n      now\n    ).run();\n    \n    return new Response(\n      JSON.stringify({ success: true, message: 'User created successfully', data: { id: userId } }),\n      {\n        status: 201,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error creating user:', error);\n    return new Response(\n      JSON.stringify({ success: false, message: 'Failed to create user' }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n}\n\nasync function handleUpdateUser(userId, request, env, corsHeaders) {\n  try {\n    const userData = await request.json();\n    \n    // Check if user exists\n    const existingUser = await env.DB.prepare('SELECT * FROM users WHERE id = ?').bind(userId).first();\n    if (!existingUser) {\n      return new Response(\n        JSON.stringify({ success: false, message: 'User not found' }),\n        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    // Build update query dynamically\n    const updateFields = [];\n    const params = [];\n    \n    if (userData.name !== undefined) {\n      updateFields.push('name = ?');\n      params.push(userData.name);\n    }\n    if (userData.email !== undefined) {\n      updateFields.push('email = ?');\n      params.push(userData.email);\n    }\n    if (userData.role !== undefined) {\n      updateFields.push('role = ?');\n      params.push(userData.role);\n    }\n    if (userData.department !== undefined) {\n      updateFields.push('department = ?');\n      params.push(userData.department);\n    }\n    if (userData.institution !== undefined) {\n      updateFields.push('institution = ?');\n      params.push(userData.institution);\n    }\n    if (userData.phone !== undefined) {\n      updateFields.push('phone = ?');\n      params.push(userData.phone);\n    }\n    if (userData.address !== undefined) {\n      updateFields.push('address = ?');\n      params.push(userData.address);\n    }\n    if (userData.expertise !== undefined) {\n      updateFields.push('expertise = ?');\n      params.push(userData.expertise ? JSON.stringify(userData.expertise) : null);\n    }\n    if (userData.nidn !== undefined) {\n      updateFields.push('nidn = ?');\n      params.push(userData.nidn);\n    }\n    if (userData.nuptk !== undefined) {\n      updateFields.push('nuptk = ?');\n      params.push(userData.nuptk);\n    }\n    if (userData.nim !== undefined) {\n      updateFields.push('nim = ?');\n      params.push(userData.nim);\n    }\n    if (userData.program_studi !== undefined) {\n      updateFields.push('program_studi = ?');\n      params.push(userData.program_studi);\n    }\n    if (userData.status_kepegawaian !== undefined) {\n      updateFields.push('status_kepegawaian = ?');\n      params.push(userData.status_kepegawaian);\n    }\n    if (userData.jabatan_fungsional !== undefined) {\n      updateFields.push('jabatan_fungsional = ?');\n      params.push(userData.jabatan_fungsional);\n    }\n    if (userData.pendidikan_terakhir !== undefined) {\n      updateFields.push('pendidikan_terakhir = ?');\n      params.push(userData.pendidikan_terakhir);\n    }\n    if (userData.tahun_masuk !== undefined) {\n      updateFields.push('tahun_masuk = ?');\n      params.push(userData.tahun_masuk);\n    }\n    if (userData.is_active !== undefined) {\n      updateFields.push('is_active = ?');\n      params.push(userData.is_active ? 1 : 0);\n    }\n    \n    if (updateFields.length === 0) {\n      return new Response(\n        JSON.stringify({ success: false, message: 'No fields to update' }),\n        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    updateFields.push('updated_at = ?');\n    params.push(new Date().toISOString());\n    params.push(userId);\n    \n    const query = `UPDATE users SET ${updateFields.join(', ')} WHERE id = ?`;\n    await env.DB.prepare(query).bind(...params).run();\n    \n    return new Response(\n      JSON.stringify({ success: true, message: 'User updated successfully' }),\n      {\n        status: 200,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error updating user:', error);\n    return new Response(\n      JSON.stringify({ success: false, message: 'Failed to update user' }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n}\n\nasync function handleDeleteUser(userId, env, corsHeaders) {\n  try {\n    // Check if user exists\n    const existingUser = await env.DB.prepare('SELECT id FROM users WHERE id = ?').bind(userId).first();\n    if (!existingUser) {\n      return new Response(\n        JSON.stringify({ success: false, message: 'User not found' }),\n        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    // Delete user\n    await env.DB.prepare('DELETE FROM users WHERE id = ?').bind(userId).run();\n    \n    return new Response(\n      JSON.stringify({ success: true, message: 'User deleted successfully' }),\n      {\n        status: 200,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error deleting user:', error);\n    return new Response(\n      JSON.stringify({ success: false, message: 'Failed to delete user' }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n}\n\n// Program Studi Handlers\nasync function handleGetProgramStudi(env, corsHeaders) {\n  try {\n    const result = await env.DB.prepare('SELECT * FROM program_studi WHERE is_active = 1 ORDER BY fakultas, nama').all();\n    \n    const programStudi = result.results.map(program => ({\n      ...program,\n      is_active: Boolean(program.is_active)\n    }));\n    \n    return new Response(\n      JSON.stringify({ success: true, data: programStudi }),\n      {\n        status: 200,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error getting program studi:', error);\n    return new Response(\n      JSON.stringify({ success: false, message: 'Failed to get program studi' }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n}\n\nasync function handleCreateProgramStudi(request, env, corsHeaders) {\n  // Admin authentication check would be here\n  try {\n    const programData = await request.json();\n    \n    if (!programData.kode || !programData.nama || !programData.fakultas || !programData.jenjang) {\n      return new Response(\n        JSON.stringify({ success: false, message: 'Missing required fields' }),\n        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    const programId = crypto.randomUUID();\n    const now = new Date().toISOString();\n    \n    await env.DB.prepare(`\n      INSERT INTO program_studi (id, kode, nama, fakultas, jenjang, akreditasi, is_active, created_at, updated_at)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `).bind(\n      programId,\n      programData.kode,\n      programData.nama,\n      programData.fakultas,\n      programData.jenjang,\n      programData.akreditasi || null,\n      1,\n      now,\n      now\n    ).run();\n    \n    return new Response(\n      JSON.stringify({ success: true, message: 'Program studi created successfully', data: { id: programId } }),\n      {\n        status: 201,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error creating program studi:', error);\n    return new Response(\n      JSON.stringify({ success: false, message: 'Failed to create program studi' }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n}\n\nasync function handleUpdateProgramStudi(programId, request, env, corsHeaders) {\n  // Admin authentication check would be here\n  try {\n    const programData = await request.json();\n    \n    const existingProgram = await env.DB.prepare('SELECT id FROM program_studi WHERE id = ?').bind(programId).first();\n    if (!existingProgram) {\n      return new Response(\n        JSON.stringify({ success: false, message: 'Program studi not found' }),\n        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    const updateFields = [];\n    const params = [];\n    \n    if (programData.kode !== undefined) {\n      updateFields.push('kode = ?');\n      params.push(programData.kode);\n    }\n    if (programData.nama !== undefined) {\n      updateFields.push('nama = ?');\n      params.push(programData.nama);\n    }\n    if (programData.fakultas !== undefined) {\n      updateFields.push('fakultas = ?');\n      params.push(programData.fakultas);\n    }\n    if (programData.jenjang !== undefined) {\n      updateFields.push('jenjang = ?');\n      params.push(programData.jenjang);\n    }\n    if (programData.akreditasi !== undefined) {\n      updateFields.push('akreditasi = ?');\n      params.push(programData.akreditasi);\n    }\n    if (programData.is_active !== undefined) {\n      updateFields.push('is_active = ?');\n      params.push(programData.is_active ? 1 : 0);\n    }\n    \n    if (updateFields.length === 0) {\n      return new Response(\n        JSON.stringify({ success: false, message: 'No fields to update' }),\n        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    updateFields.push('updated_at = ?');\n    params.push(new Date().toISOString());\n    params.push(programId);\n    \n    const query = `UPDATE program_studi SET ${updateFields.join(', ')} WHERE id = ?`;\n    await env.DB.prepare(query).bind(...params).run();\n    \n    return new Response(\n      JSON.stringify({ success: true, message: 'Program studi updated successfully' }),\n      {\n        status: 200,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error updating program studi:', error);\n    return new Response(\n      JSON.stringify({ success: false, message: 'Failed to update program studi' }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n}\n\nasync function handleDeleteProgramStudi(programId, env, corsHeaders) {\n  // Admin authentication check would be here\n  try {\n    const existingProgram = await env.DB.prepare('SELECT id FROM program_studi WHERE id = ?').bind(programId).first();\n    if (!existingProgram) {\n      return new Response(\n        JSON.stringify({ success: false, message: 'Program studi not found' }),\n        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    // Soft delete by setting is_active to false\n    await env.DB.prepare('UPDATE program_studi SET is_active = 0, updated_at = ? WHERE id = ?')\n      .bind(new Date().toISOString(), programId).run();\n    \n    return new Response(\n      JSON.stringify({ success: true, message: 'Program studi deleted successfully' }),\n      {\n        status: 200,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error deleting program studi:', error);\n    return new Response(\n      JSON.stringify({ success: false, message: 'Failed to delete program studi' }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n}\n\n// Get user statistics\nasync function handleGetUserStatistics(request, env, corsHeaders) {\n  try {\n    // Verify authentication\n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return new Response(\n        JSON.stringify({ success: false, message: 'Authentication required' }),\n        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n\n    const token = authHeader.substring(7);\n    const decoded = await verifyJWT(token, env.JWT_SECRET);\n    if (!decoded) {\n      return new Response(\n        JSON.stringify({ success: false, message: 'Invalid token' }),\n        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n\n    // Check if user has permission to view statistics\n    // Allow lecturers, admins, lppm_admin, and super_admin\n    const allowedRoles = ['lecturer', 'admin', 'lppm_admin', 'super_admin'];\n    if (!allowedRoles.includes(decoded.role)) {\n      return new Response(\n        JSON.stringify({ \n          success: false, \n          message: 'Insufficient permissions',\n          userRole: decoded.role \n        }),\n        { status: 403, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n      );\n    }\n\n    const stats = await env.DB.prepare(`\n      SELECT \n        COUNT(*) as total,\n        COUNT(CASE WHEN role = 'lecturer' THEN 1 END) as lecturers,\n        COUNT(CASE WHEN role = 'student' THEN 1 END) as students,\n        COUNT(CASE WHEN role IN ('admin', 'lppm_admin', 'super_admin') THEN 1 END) as admins,\n        COUNT(CASE WHEN is_active = 1 THEN 1 END) as active_users,\n        COUNT(CASE WHEN is_active = 0 THEN 1 END) as inactive_users\n      FROM users\n    `).first();\n    \n    return new Response(\n      JSON.stringify({\n        success: true,\n        data: stats\n      }),\n      {\n        status: 200,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error getting user statistics:', error);\n    return new Response(\n      JSON.stringify({ success: false, message: 'Failed to get user statistics' }),\n      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }\n    );\n  }\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/suhendararyadi/Documents/Belajar Coding/NEXTJS.JS/Aplikasi LPPM 2/lppm-research-system/workers/auth.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/suhendararyadi/Library/Application Support/Herd/config/nvm/versions/node/v22.17.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/suhendararyadi/Library/Application Support/Herd/config/nvm/versions/node/v22.17.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/suhendararyadi/Documents/Belajar Coding/NEXTJS.JS/Aplikasi LPPM 2/lppm-research-system/workers/auth.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/suhendararyadi/Documents/Belajar Coding/NEXTJS.JS/Aplikasi LPPM 2/lppm-research-system/.wrangler/tmp/bundle-QmdgzI/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/suhendararyadi/Library/Application Support/Herd/config/nvm/versions/node/v22.17.0/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/suhendararyadi/Documents/Belajar Coding/NEXTJS.JS/Aplikasi LPPM 2/lppm-research-system/.wrangler/tmp/bundle-QmdgzI/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/suhendararyadi/Documents/Belajar Coding/NEXTJS.JS/Aplikasi LPPM 2/lppm-research-system/.wrangler/tmp/bundle-QmdgzI/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
